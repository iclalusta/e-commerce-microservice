# Give your application a name and set a unique port
# (so it doesn't clash with your other microservices)
server.port=${ORDER_SERVICE_PORT:8085}
spring.application.name=order-service

# --- PostgreSQL Database Configuration ---
# The URL to your PostgreSQL database. You might need to create a database named "order_db".
spring.datasource.url=${SPRING_DATASOURCE_URL}
spring.datasource.username=${SPRING_DATASOURCE_USERNAME}
spring.datasource.password=${SPRING_DATASOURCE_PASSWORD}

# --- JPA / Hibernate Configuration ---
# This is a very useful property for development.
# "update" means Hibernate will automatically create or update your database tables
# based on your @Entity classes when the application starts.
spring.jpa.hibernate.ddl-auto=update
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect

# This makes the SQL printed to the console readable (optional but recommended)
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true

# --- RabbitMQ Configuration ---
# Tells your application where to find the RabbitMQ message broker
spring.rabbitmq.host=localhost
spring.rabbitmq.port=5672
spring.rabbitmq.username=guest
spring.rabbitmq.password=guest
rabbitmq.exchange.name=order_exchange

# --- URLs for Other Microservices ---
# It's good practice to define the URLs for other services here
# instead of hardcoding them in your Java code.
cart.service.url=${CART_SERVICE_URI:http://cart-service:8084}
payment.service.url=${PAYMENT_SERVICE_URI:http://payment-service:8086}