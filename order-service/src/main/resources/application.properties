# Give your application a name and set a unique port
# (so it doesn't clash with your other microservices)
server.port=${ORDER_SERVICE_PORT:8085}
spring.application.name=order-service

# --- PostgreSQL Database Configuration ---
# The URL to your PostgreSQL database. You might need to create a database named "order_db".
spring.datasource.url=${SPRING_DATASOURCE_URL}
spring.datasource.username=${SPRING_DATASOURCE_USERNAME}
spring.datasource.password=${SPRING_DATASOURCE_PASSWORD}

# --- JPA / Hibernate Configuration ---
# This is a very useful property for development.
# "update" means Hibernate will automatically create or update your database tables
# based on your @Entity classes when the application starts.
spring.jpa.hibernate.ddl-auto=update
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect

# This makes the SQL printed to the console readable (optional but recommended)
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true

# --- URLs for Other Microservices ---
# It's good practice to define the URLs for other services here
# instead of hardcoding them in your Java code.
cart.service.url=${CART_SERVICE_URI:http://cart-service:8084}
payment.service.url=${PAYMENT_SERVICE_URI:http://payment-service:8086}

# --- RabbitMQ Yapılandırması ---
spring.rabbitmq.host=${SPRING_RABBITMQ_HOST:rabbitmq}
spring.rabbitmq.port=${SPRING_RABBITMQ_PORT:5672}
spring.rabbitmq.username=${SPRING_RABBITMQ_USERNAME:guest}
spring.rabbitmq.password=${SPRING_RABBITMQ_PASSWORD:guest}

rabbitmq.queue.name=order.created.queue
rabbitmq.exchange.name=order.exchange
rabbitmq.routing.key=order.created.routingkey


# --- Tracing Configuration ---

# --- Actuator Configuration ---
# Expose health and prometheus endpoints over the web
management.endpoints.web.exposure.include=health,prometheus

# Show full details on the health endpoint (e.g., database connection status)
management.endpoint.health.show-details=always

# The URL where your Zipkin server will be running
management.zipkin.tracing.endpoint=http://zipkin:9411/api/v2/spans

# Tell Micrometer how often to sample requests for tracing.
# 1.0 means trace 100% of requests (great for development and demo)
# In production, you might set this to 0.1 (10%)
management.tracing.sampling.probability=1.0
