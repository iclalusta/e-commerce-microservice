version: '3.8'

services:
  # 1. API Gateway (Spring Boot) - Öncelikli Yapılandırma
  zipkin:
    image: openzipkin/zipkin:latest
    container_name: zipkin
    ports:
      - "9411:9411"
    networks:
      - ecommerce-net

  api-gateway:
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    container_name: api-gateway
    restart: on-failure
    ports:
      - "8080:8080" # Dış dünyaya açılan tek kapı
    environment:
      # Öncelikli dosyadan alınan JWT anahtarı
      - JWT_SECRET=your-super-secret-key-that-is-long-and-secure
      # Diğer servislerle iletişim için ikinci dosyadan alınan URI'lar
      - SERVER_PORT=8080
      - AUTH_SERVICE_URI=http://auth-service:8081
      - USER_SERVICE_URI=http://user-service:8082
      - PRODUCT_SERVICE_URI=http://product-service:8083 # Henüz eklenmedi ama gelecekte kullanılabilir
      - CART_SERVICE_URI=http://cart-service:8084
      - ORDER_SERVICE_URI=http://order-service:8085
      - PAYMENT_SERVICE_URI=http://payment-service:8086
      - MANAGEMENT_ZIPKIN_TRACING_ENDPOINT=http://zipkin:9411/api/v2/spans 
    networks:
      - ecommerce-net
    depends_on:
      - product-service
      - auth-service
      - user-service
      - cart-service
      - order-service
      - payment-service
      - zipkin

  # 2. Auth Service (Go) - Öncelikli Yapılandırma
  auth-service:
    build:
      context: ./auth-service
      dockerfile: Dockerfile
    container_name: auth-service
    restart: on-failure
    ports: # Dahili iletişim için porta gerek yok ama hata ayıklama için eklenebilir.
      - "8081:8081"
    environment:
      # Öncelikli dosyadan alınan veritabanı bağlantı bilgileri
      - DB_HOST=postgres_db
      - DB_USER=myuser
      - DB_PASSWORD=mypassword
      - DB_NAME=ecommerce
      - DB_PORT=5432
      # Öncelikli dosyadan alınan JWT anahtarı
      - JWT_SECRET=your-super-secret-key-that-is-long-and-secure
      # Diğer servislerle iletişim için eklenen değişkenler
      - AUTH_SERVICE_PORT=8081
      - USER_SERVICE_URL=http://user-service:8082
    networks:
      - ecommerce-net
    depends_on:
      - postgres_db

  # 3. User Service (Go) - Öncelikli Yapılandırma
  user-service:
    build:
      context: ./user-service
      dockerfile: Dockerfile
    container_name: user-service
    restart: on-failure
    ports: # Dahili iletişim için porta gerek yok ama hata ayıklama için eklenebilir.
        - "8082:8082"
    environment:
      # Öncelikli dosyadan alınan veritabanı bağlantı bilgileri
      - DB_HOST=postgres_db
      - DB_USER=myuser
      - DB_PASSWORD=mypassword
      - DB_NAME=ecommerce
      - DB_PORT=5432
      # Diğer servislerle iletişim için eklenen değişkenler
      - USER_SERVICE_PORT=8082
      - AUTH_SERVICE_URL=http://auth-service:8081
    networks:
      - ecommerce-net
    depends_on:
      - postgres_db

  # 5. Order Service - İkinci Dosyadan Alınan
  product-service:
    build:
      context: ./product-service
      dockerfile: Dockerfile
    container_name: product-service
    restart: on-failure
    ports:
      - "8083:8083"
    environment:
      - PRODUCT_SERVICE_PORT=8083
      - SPRING_DATASOURCE_URL=jdbc:postgresql://product-db:5432/productdb
      - SPRING_DATASOURCE_USERNAME=productuser
      - SPRING_DATASOURCE_PASSWORD=productpassword
      - AUTH_SERVICE_URL=http://auth-service:8081
      - SPRING_RABBITMQ_HOST=rabbitmq
      - SPRING_RABBITMQ_PORT=5672
      - SPRING_RABBITMQ_USERNAME=guest
      - SPRING_RABBITMQ_PASSWORD=guest
      - MANAGEMENT_ZIPKIN_TRACING_ENDPOINT=http://zipkin:9411/api/v2/spans 
    networks:
      - ecommerce-net
    depends_on:
      - rabbitmq
      - zipkin

  # 4. Cart Service - İkinci Dosyadan Alınan
  cart-service:
    build:
      context: ./cart-service
      dockerfile: Dockerfile
    container_name: cart-service
    restart: on-failure
    ports:
      - "8084:8084"
    environment:
      - CART_SERVICE_PORT=8084
      - PRODUCT_SERVICE_URI=http://product-service:8083
      - SPRING_DATA_MONGODB_URI=mongodb://cart-mongodb:27017/cartdb
      - SPRING_RABBITMQ_HOST=rabbitmq
      - SPRING_RABBITMQ_PORT=5672
      - SPRING_RABBITMQ_USERNAME=guest
      - SPRING_RABBITMQ_PASSWORD=guest
      - AUTH_SERVICE_URL=http://auth-service:8081
      - MANAGEMENT_ZIPKIN_TRACING_ENDPOINT=http://zipkin:9411/api/v2/spans 
    networks:
      - ecommerce-net
    depends_on:
      - cart-mongodb
      - rabbitmq
      - auth-service
      - zipkin

  # 5. Order Service - İkinci Dosyadan Alınan
  order-service:
    build:
      context: ./order-service
      dockerfile: Dockerfile
    container_name: order-service
    restart: on-failure
    ports:
      - "8085:8085"
    environment:
      - ORDER_SERVICE_PORT=8085
      - SPRING_DATASOURCE_URL=jdbc:postgresql://order-db:5432/orderdb
      - SPRING_DATASOURCE_USERNAME=orderuser
      - SPRING_DATASOURCE_PASSWORD=orderpassword
      - AUTH_SERVICE_URL=http://auth-service:8081
      - PAYMENT_SERVICE_URI=http://payment-service:8086
      - CART_SERVICE_URI=http://cart-service:8084
            # --- EKLENEN SATIRLAR ---
      - SPRING_RABBITMQ_HOST=rabbitmq
      - SPRING_RABBITMQ_PORT=5672
      - SPRING_RABBITMQ_USERNAME=guest
      - SPRING_RABBITMQ_PASSWORD=guest
      # --- EKLENEN SATIRLAR SONU ---
      - MANAGEMENT_ZIPKIN_TRACING_ENDPOINT=http://zipkin:9411/api/v2/spans 
    networks:
      - ecommerce-net
    depends_on:
      - order-db
      - auth-service
      - rabbitmq
      - zipkin

  # 6. Payment Service - İkinci Dosyadan Alınan
  payment-service:
    build:
      context: ./payment-service
      dockerfile: Dockerfile
    container_name: payment-service
    restart: on-failure
    ports:
      - "8086:8086"
    environment:
      - DB_URL=jdbc:mysql://payment-db:3306/paymentdb
      - DB_USERNAME=root
      - DB_PASSWORD=EInDcm29pE
      - AUTH_SERVICE_URL=http://auth-service:8081
      - MANAGEMENT_ZIPKIN_TRACING_ENDPOINT=http://zipkin:9411/api/v2/spans 
    networks:
      - ecommerce-net
    depends_on:
      - payment-db
      - auth-service
      - zipkin

  # --- VERİTABANI VE DİĞER BAĞIMLILIK SERVİSLERİ ---

  # User ve Auth Servisleri için Ortak PostgreSQL Veritabanı (Öncelikli Dosyadan)
  postgres_db:
    image: postgres:13
    container_name: postgres_db
    environment:
      POSTGRES_USER: myuser
      POSTGRES_PASSWORD: mypassword
      POSTGRES_DB: ecommerce
    ports:
      # Dışarıdan erişim için (isteğe bağlı)
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - ecommerce-net

  # Order Service için PostgreSQL Veritabanı
  order-db:
    image: postgres:13
    container_name: order-db
    environment:
      - POSTGRES_USER=orderuser
      - POSTGRES_PASSWORD=orderpassword
      - POSTGRES_DB=orderdb
    volumes:
      - order_db_data:/var/lib/postgresql/data
    networks:
      - ecommerce-net

  # Order Service için PostgreSQL Veritabanı
  product-db:
    image: postgres:13
    container_name: product-db
    environment:
      - POSTGRES_USER=productuser
      - POSTGRES_PASSWORD=productpassword
      - POSTGRES_DB=productdb
    volumes:
      - product_db_data:/var/lib/postgresql/data
    networks:
      - ecommerce-net

  # Payment Service için MySQL Veritabanı
  payment-db:
    image: mysql:8.0
    container_name: payment-db
    environment:
      - MYSQL_ROOT_PASSWORD=EInDcm29pE
      - MYSQL_DATABASE=paymentdb
    volumes:
      - payment_db_data:/var/lib/mysql
    networks:
      - ecommerce-net

  # Cart Service için MongoDB Veritabanı
  cart-mongodb:
    image: mongo:latest
    container_name: cart-mongodb
    ports:
      - "27017:27017"
    volumes:
      - cart_mongodb_data:/data/db
    networks:
      - ecommerce-net

  # Mesajlaşma Servisi (RabbitMQ)
  rabbitmq:
    image: rabbitmq:management
    container_name: rabbitmq
    ports:
      - "5672:5672"   # AMQP portu
      - "15672:15672" # Yönetim arayüzü portu
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    networks:
      - ecommerce-net

# --- AĞ VE VOLUME TANIMLAMALARI ---
# Servislerin birbirleriyle konuşacağı ortak ağ
networks:
  ecommerce-net:
    driver: bridge

# Verilerin kalıcı olmasını sağlayan volume'lar
volumes:
  postgres_data:
  order_db_data:
  product_db_data:
  payment_db_data:
  cart_mongodb_data:
